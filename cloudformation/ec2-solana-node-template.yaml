
AWSTemplateFormatVersion: '2010-09-09'
Metadata: 
  License: Apache-2.0
Description: AWS CloudFormation Sample Template for x86 EC2 for Solana blockcahin node.
Parameters:
  InstanceType:
    Description: EC2 instance type. Recommended types are r6a, r6i, and i4i (with instance store) and network-enhanced classes like r6in. 
    Type: String
    Default: r6a.8xlarge
  Ec2AmiId:
    #Type: AWS::EC2::Image::Id
    #Default: 'ami-0568936c8d2b91c4e' # Ubuntu, 20.04 LTS, amd64 focal image build on 2023-02-07
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: "/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id"
    Description: "Use Ubuntu 20.04 LTS image for amd64 or arm64. Find more: https://discourse.ubuntu.com/t/finding-ubuntu-images-with-the-aws-ssm-parameter-store/15507"
  DataDiscType:
    Description: "Set EBS type for to store state data (gp3, io2) or set to (none) for instnace store instances like i4i."
    Type: String
    AllowedValues:
      - "io2"
      - "gp3"
      - "instancestore"
    Default: "gp3"
  CIDRAllowedAccessRPC:
    Description: "A CIDR block that is allowed to connect to the node's RPC ports."
    Type: String
    Default: "172.16.0.0/12"
  AccountsDiscType:
    Description: "Set EBS type for to store accounts data (gp3, io2) or set to (none) for instnace store instances like i4i."
    Type: String
    AllowedValues:
      - "io2"
      - "gp3"
      - "instancestore"
    Default: "gp3"
  SolanaVersion:
    Description: "The version of Solana to deploy. Select from here: https://github.com/solana-labs/solana/releases ."
    Type: String
    Default: "1.14.20"
  SolanaNodeType:
    Description: "Choose Solana Node Type (validator, lightrpc, heavyrpc). For heavyrpc node type make sure you choose instances with at least 1TB of RAM."
    Type: String
    Default: "lightrpc"
    AllowedValues:
      - "validator"
      - "lightrpc"
      - "heavyrpc"
  SolanaNodeIdentitySecretARN:
    Description: "Optional. The ARN of the secret in AWS Secrets Manager with the node identity key pair. In case you want to provision a node but keep the old identity."
    Type: String
    Default: "none"
  VoteAccountSecretARN:
    Description: "Optional for validator node type. ARN of the secret in AWS Secrets Manager with the Vote Account's key pair."
    Type: String
    Default: "none"
  AuthorizedWithdrawerAccountSecretARN:
    Description: "Optional for validator node type. The ARN of the secret in AWS Secrets Manager with the Authorized Withdrawer Account's key pair."
    Type: String
    Default: "none"
  RegistrationTransactionFundingAccountSecretARN:
    Description: "Required for validator node type. The ARN of the secret in AWS Secrets Manager with Registration Transaction Funding Account's key pair. Needs to have sufficient SOL to pay for on-chain validator creation transaction. If not present, the node provisioning script assumes the on-chain validator creation transaction was issued elsewhere and will skip it."
    Type: String
    Default: "none"
  SolanaCluster:
    Description: "The Solana cluster to connect to."
    Type: String
    AllowedValues:
      - "mainnet-beta"
      - "testnet"
      - "devnet"
Conditions:
  AddDataDiscGP3: !Equals [!Ref DataDiscType, "gp3"]
  AddAccountsDiscGP3: !Equals [!Ref AccountsDiscType, "gp3"]
  AddDataDiscIO2: !Equals [!Ref DataDiscType, "io2"]
  AddAccountsDiscIO2: !Equals [!Ref AccountsDiscType, "io2"]
Resources:
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      ImageId: !Ref 'Ec2AmiId'
      SecurityGroups: [!Ref 'EC2SecurityGroup']
      IamInstanceProfile: !Ref EC2InstanceProfile
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash
            set +e

            sudo bash -c 'echo "CF_STACK_NAME=${CF_STACK_NAME}" >> /etc/environment'
            sudo bash -c 'echo "ACCOUNTS_DISC_TYPE=${ACCOUNTS_DISC_TYPE}" >> /etc/environment'
            sudo bash -c 'echo "DATA_DISC_TYPE=${DATA_DISC_TYPE}" >> /etc/environment'
            sudo bash -c 'echo "SOLANA_VERSION=${SOLANA_VERSION}" >> /etc/environment'
            sudo bash -c 'echo "SOLANA_NODE_TYPE=${SOLANA_NODE_TYPE}" >> /etc/environment'
            sudo bash -c 'echo "NODE_IDENTITY_SECRET_ARN=${NODE_IDENTITY_SECRET_ARN}" >> /etc/environment'
            sudo bash -c 'echo "VOTE_ACCOUNT_SECRET_ARN=${VOTE_ACCOUNT_SECRET_ARN}" >> /etc/environment'
            sudo bash -c 'echo "AUTHORIZED_WITHDRAWER_ACCOUNT_SECRET_ARN=${AUTHORIZED_WITHDRAWER_ACCOUNT_SECRET_ARN}" >> /etc/environment'
            sudo bash -c 'echo "REGISTRATION_TRANSACTION_FUNDING_ACCOUNT_SECRET_ARN=${REGISTRATION_TRANSACTION_FUNDING_ACCOUNT_SECRET_ARN}" >> /etc/environment'
            sudo bash -c 'echo "SOLANA_CLUSTER_ID=${SOLANA_CLUSTER_ID}" >> /etc/environment'
            sudo source /etc/environment

            sudo apt-get -yqq update
            sudo apt-get -yqq install awscli jq

            cd ~
            wget -q https://raw.githubusercontent.com/frbrkoala/solana-configs-for-aws/main/src/scripts/user-data/node-user-data.sh
            sudo cp ./node-user-data.sh /opt/user-data.sh

            sudo chmod +x /opt/user-data.sh
            sudo /opt/user-data.sh
          - CF_STACK_NAME: !Ref AWS::StackName
            ACCOUNTS_DISC_TYPE: !Ref AccountsDiscType
            DATA_DISC_TYPE: !Ref DataDiscType
            SOLANA_VERSION: !Ref SolanaVersion
            SOLANA_NODE_TYPE: !Ref SolanaNodeType
            NODE_IDENTITY_SECRET_ARN: !Ref SolanaNodeIdentitySecretARN
            VOTE_ACCOUNT_SECRET_ARN: !Ref VoteAccountSecretARN
            AUTHORIZED_WITHDRAWER_ACCOUNT_SECRET_ARN: !Ref AuthorizedWithdrawerAccountSecretARN
            REGISTRATION_TRANSACTION_FUNDING_ACCOUNT_SECRET_ARN: !Ref RegistrationTransactionFundingAccountSecretARN
            SOLANA_CLUSTER_ID: !Ref SolanaCluster
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeType: "gp3"
          VolumeSize: 400
      Tags: 
        - Key: "Name"
          Value: !Ref AWS::StackName
        - Key: "Project"
          Value: "solana-on-aws"

  DataEBSVolumeGP3:
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: gp3
      Iops: "16000"
      Throughput: 700
      Size: 2000
      Encrypted: true
      AvailabilityZone: !GetAtt EC2Instance1.AvailabilityZone
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-data'
        - Key: "Project"
          Value: "solana-on-aws"
    DeletionPolicy: Delete
    Condition: AddDataDiscGP3
  DataEBSVolumeAttachmentGP3:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EC2Instance1
      VolumeId: !Ref DataEBSVolumeGP3
      Device: /dev/sdf
    Condition: AddDataDiscGP3

  AccountsEBSVolumeGP3:
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: gp3
      Iops: "16000"
      Throughput: 700
      Size: 500
      Encrypted: true
      AvailabilityZone: !GetAtt EC2Instance1.AvailabilityZone
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-accounts'
        - Key: "Project"
          Value: "solana-on-aws"
    DeletionPolicy: Delete
    Condition: AddAccountsDiscGP3
  AccountsEBSVolumeAttachmentGP3:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EC2Instance1
      VolumeId: !Ref AccountsEBSVolumeGP3
      Device: /dev/sdm
    Condition: AddAccountsDiscGP3

  DataEBSVolumeIO2:
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: io2
      Iops: "16000"
      Size: 2000
      Encrypted: true
      AvailabilityZone: !GetAtt EC2Instance1.AvailabilityZone
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-data'
        - Key: "Project"
          Value: "solana-on-aws"
    DeletionPolicy: Delete
    Condition: AddDataDiscIO2
  DataEBSVolumeAttachmentIO2:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EC2Instance1
      VolumeId: !Ref DataEBSVolumeIO2
      Device: /dev/sdf
    Condition: AddDataDiscIO2

  AccountsEBSVolumeIO2:
    Type: AWS::EC2::Volume
    Properties:
      VolumeType: io2
      Iops: "16000"
      Size: 500
      Encrypted: true
      AvailabilityZone: !GetAtt EC2Instance1.AvailabilityZone
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName}-accounts'
        - Key: "Project"
          Value: "solana-on-aws"
    DeletionPolicy: Delete
    Condition: AddAccountsDiscIO2
  AccountsEBSVolumeAttachmentIO2:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref EC2Instance1
      VolumeId: !Ref AccountsEBSVolumeIO2
      Device: /dev/sdm
    Condition: AddAccountsDiscIO2

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: "/"
      Roles: 
        - 
          Ref: "EC2Role"
  EC2Role:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
        - "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      Tags:
        - Key: "Project"
          Value: "solana-on-aws"
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Solana Blockchain Nodes Access
      # SecurityGroupEgress:
      # - IpProtocol: tcp
      #   FromPort: 0
      #   ToPort: 65535
      #   CidrIp: 0.0.0.0/0
      # - IpProtocol: udp
      #   FromPort: 0
      #   ToPort: 65535
      #   CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      # UDP - P2P protocols (gossip, turbine, repair, etc)
      - IpProtocol: tcp
        FromPort: '8801'
        ToPort: '8812'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '8801'
        ToPort: '8812'
        CidrIp: 0.0.0.0/0
      # RPC port HTTP (user access needs to be restricted. Allowed access only from internal 172.16.x.x)
      - IpProtocol: tcp
        FromPort: '8899'
        ToPort: '8899'
        CidrIp: !Ref CIDRAllowedAccessRPC
      # RPC port WebSocket (user access needs to be restricted. Allowed access only from internal 172.16.x.x)
      - IpProtocol: tcp
        FromPort: '8900'
        ToPort: '8900'
        CidrIp: !Ref CIDRAllowedAccessRPC
      Tags:
        - Key: "Project"
          Value: "solana-on-aws"
  Dashboard:
      Type: "AWS::CloudWatch::Dashboard"
      Properties:
          DashboardName: !Ref AWS::StackName
          DashboardBody: !Sub 
            - |
              {
                "widgets": [
                    {
                        "height": 5,
                        "width": 6,
                        "y": 0,
                        "x": 0,
                        "type": "metric",
                        "properties": {
                            "view": "timeSeries",
                            "stat": "Average",
                            "period": 300,
                            "stacked": false,
                            "yAxis": {
                                "left": {
                                    "min": 0
                                }
                            },
                            "region": "${AWS::Region}",
                            "metrics": [
                                [ "AWS/EC2", "CPUUtilization", "InstanceId", "${INSTANCE_ID}", { "label": "${INSTANCE_ID}-${INSTANCE_NAME}" } ]
                            ],
                            "title": "CPU utilization (%)"
                        }
                    },
                    {
                        "height": 3,
                        "width": 6,
                        "y": 8,
                        "x": 18,
                        "type": "metric",
                        "properties": {
                            "view": "timeSeries",
                            "stat": "Average",
                            "period": 300,
                            "stacked": false,
                            "yAxis": {
                                "left": {
                                    "min": 0
                                }
                            },
                            "region": "${AWS::Region}",
                            "metrics": [
                                [ "AWS/EC2", "NetworkIn", "InstanceId", "${INSTANCE_ID}", { "label": "${INSTANCE_ID}-${INSTANCE_NAME}" } ]
                            ],
                            "title": "Network in (bytes)"
                        }
                    },
                    {
                        "height": 4,
                        "width": 6,
                        "y": 11,
                        "x": 18,
                        "type": "metric",
                        "properties": {
                            "view": "timeSeries",
                            "stat": "Average",
                            "period": 300,
                            "stacked": false,
                            "yAxis": {
                                "left": {
                                    "min": 0
                                }
                            },
                            "region": "${AWS::Region}",
                            "metrics": [
                                [ "AWS/EC2", "NetworkOut", "InstanceId", "${INSTANCE_ID}", { "label": "${INSTANCE_ID}-${INSTANCE_NAME}" } ]
                            ],
                            "title": "Network out (bytes)"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 10,
                        "x": 0,
                        "type": "metric",
                        "properties": {
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Average",
                            "period": 300,
                            "metrics": [
                                [ "CWAgent", "mem_used_percent", "InstanceId", "${INSTANCE_ID}", { "label": "${INSTANCE_ID}-${INSTANCE_NAME}" } ]
                            ],
                            "title": "Mem Used (%)"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 5,
                        "x": 0,
                        "type": "metric",
                        "properties": {
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Average",
                            "period": 300,
                            "metrics": [
                                [ "CWAgent", "cpu_usage_iowait", "InstanceId", "${INSTANCE_ID}", { "label": "${INSTANCE_ID}-${INSTANCE_NAME}" } ]
                            ],
                            "title": "CPU Usage IO wait (%)"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 0,
                        "x": 6,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ { "expression": "m7/PERIOD(m7)", "label": "Read", "id": "e7" } ],
                                [ "CWAgent", "diskio_reads", "InstanceId", "${INSTANCE_ID}", "name", "nvme1n1", { "id": "m7", "visible": false, "stat": "Sum", "period": 60 } ],
                                [ { "expression": "m8/PERIOD(m8)", "label": "Write", "id": "e8" } ],
                                [ "CWAgent", "diskio_writes", "InstanceId", "${INSTANCE_ID}", "name", "nvme1n1", { "id": "m8", "visible": false, "stat": "Sum", "period": 60 } ]
                            ],
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Sum",
                            "period": 60,
                            "title": "nvme1n1 Volume Read/Write (IO/sec)"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 0,
                        "x": 12,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ { "expression": "m7/PERIOD(m7)", "label": "Write", "id": "e7", "region": "${AWS::Region}" } ],
                                [ "CWAgent", "diskio_writes", "InstanceId", "${INSTANCE_ID}", "name", "nvme2n1", { "id": "m7", "visible": false, "stat": "Sum", "period": 60 } ],
                                [ { "expression": "m8/PERIOD(m8)", "label": "Read", "id": "e8", "region": "${AWS::Region}" } ],
                                [ "CWAgent", "diskio_reads", "InstanceId", "${INSTANCE_ID}", "name", "nvme2n1", { "id": "m8", "visible": false, "stat": "Sum", "period": 60 } ]
                            ],
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Average",
                            "period": 300,
                            "title": "nvme2n1 Volume Read/Write (IO/sec)"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 10,
                        "x": 12,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ { "expression": "(m2/1048576)/PERIOD(m2)", "label": "Read", "id": "e2", "period": 60, "region": "${AWS::Region}" } ],
                                [ "CWAgent", "diskio_read_bytes", "InstanceId", "${INSTANCE_ID}", "name", "nvme2n1", { "id": "m2", "stat": "Sum", "visible": false, "period": 60 } ],
                                [ { "expression": "(m3/1048576)/PERIOD(m3)", "label": "Write", "id": "e3", "period": 60, "region": "${AWS::Region}" } ],
                                [ "CWAgent", "diskio_write_bytes", "InstanceId", "${INSTANCE_ID}", "name", "nvme2n1", { "id": "m3", "stat": "Sum", "visible": false, "period": 60 } ]
                            ],
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Average",
                            "period": 60,
                            "title": "nvme2n1 Volume Read/Write throughput (MiB/sec)"
                        }
                    },
                    {
                        "height": 4,
                        "width": 6,
                        "y": 0,
                        "x": 18,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ "CWAgent", "solana_block_height", "InstanceId", "${INSTANCE_ID}", { "label": "${INSTANCE_ID}-${INSTANCE_NAME}" } ]
                            ],
                            "sparkline": true,
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Maximum",
                            "period": 60,
                            "title": "Solana Block Height"
                        }
                    },
                    {
                        "height": 4,
                        "width": 6,
                        "y": 4,
                        "x": 18,
                        "type": "metric",
                        "properties": {
                            "sparkline": true,
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Maximum",
                            "period": 60,
                            "metrics": [
                                [ "CWAgent", "solana_slots_behind", "InstanceId", "${INSTANCE_ID}", { "label": "${INSTANCE_ID}-${INSTANCE_NAME}" } ]
                            ],
                            "title": "Solana Slots Behind"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 5,
                        "x": 12,
                        "type": "metric",
                        "properties": {
                            "view": "timeSeries",
                            "stat": "Sum",
                            "period": 60,
                            "stacked": false,
                            "sparkline": true,
                            "yAxis": {
                                "left": {
                                    "min": 0
                                }
                            },
                            "region": "${AWS::Region}",
                            "metrics": [
                                [ { "expression": "IF(m7_2 !=0, (m7_1 / m7_2), 0)", "label": "Read", "id": "e7" } ],
                                [ "CWAgent", "diskio_read_time", "InstanceId", "${INSTANCE_ID}", "name", "nvme2n1", { "id": "m7_1", "visible": false, "stat": "Sum", "period": 60 } ],
                                [ "CWAgent", "diskio_reads", "InstanceId", "${INSTANCE_ID}", "name", "nvme2n1", { "id": "m7_2", "visible": false, "stat": "Sum", "period": 60 } ],
                                [ { "expression": "IF(m7_4 !=0, (m7_3 / m7_4), 0)", "label": "Write", "id": "e8" } ],
                                [ "CWAgent", "diskio_write_time", "InstanceId", "${INSTANCE_ID}", "name", "nvme2n1", { "id": "m7_3", "visible": false, "stat": "Sum", "period": 60 } ],
                                [ "CWAgent", "diskio_writes", "InstanceId", "${INSTANCE_ID}", "name", "nvme2n1", { "id": "m7_4", "visible": false, "stat": "Sum", "period": 60 } ]
                            ],
                            "title": "nvme2n1 Volume Read/Write latency (ms/op)"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 5,
                        "x": 6,
                        "type": "metric",
                        "properties": {
                            "view": "timeSeries",
                            "stat": "Sum",
                            "period": 60,
                            "stacked": false,
                            "yAxis": {
                                "left": {
                                    "min": 0
                                }
                            },
                            "region": "${AWS::Region}",
                            "metrics": [
                                [ { "expression": "IF(m7_2 !=0, (m7_1 / m7_2), 0)", "label": "Read", "id": "e7" } ],
                                [ "CWAgent", "diskio_read_time", "InstanceId", "${INSTANCE_ID}", "name", "nvme1n1", { "id": "m7_1", "visible": false, "stat": "Sum", "period": 60 } ],
                                [ "CWAgent", "diskio_reads", "InstanceId", "${INSTANCE_ID}", "name", "nvme1n1", { "id": "m7_2", "visible": false, "stat": "Sum", "period": 60 } ],
                                [ { "expression": "IF(m7_4 !=0, (m7_3 / m7_4), 0)", "label": "Write", "id": "e8" } ],
                                [ "CWAgent", "diskio_write_time", "InstanceId", "${INSTANCE_ID}", "name", "nvme1n1", { "id": "m7_3", "visible": false, "stat": "Sum", "period": 60 } ],
                                [ "CWAgent", "diskio_writes", "InstanceId", "${INSTANCE_ID}", "name", "nvme1n1", { "id": "m7_4", "visible": false, "stat": "Sum", "period": 60 } ]
                            ],
                            "title": "nvme1n1 Volume Read/Write latency (ms/op)"
                        }
                    },
                    {
                        "height": 5,
                        "width": 6,
                        "y": 10,
                        "x": 6,
                        "type": "metric",
                        "properties": {
                            "metrics": [
                                [ { "expression": "(m2/1048576)/PERIOD(m2)", "label": "Read", "id": "e2", "period": 60, "region": "${AWS::Region}" } ],
                                [ "CWAgent", "diskio_read_bytes", "InstanceId", "${INSTANCE_ID}", "name", "nvme1n1", { "id": "m2", "stat": "Sum", "visible": false, "period": 60 } ],
                                [ { "expression": "(m3/1048576)/PERIOD(m3)", "label": "Write", "id": "e3", "period": 60, "region": "${AWS::Region}" } ],
                                [ "CWAgent", "diskio_write_bytes", "InstanceId", "${INSTANCE_ID}", "name", "nvme1n1", { "id": "m3", "stat": "Sum", "visible": false, "period": 60 } ]
                            ],
                            "view": "timeSeries",
                            "stacked": false,
                            "region": "${AWS::Region}",
                            "stat": "Average",
                            "period": 60,
                            "title": "nvme1n1 Volume Read/Write throughput (MiB/sec)"
                        }
                    }
                  ]
              }
            - INSTANCE_ID: !Ref EC2Instance1
              INSTANCE_NAME:  !Ref AWS::StackName
Outputs:
  Instance:
    Value: !GetAtt [EC2Instance1, PublicDnsName]
    Description: DNS Name of the newly created EC2 instance